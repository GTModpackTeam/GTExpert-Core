import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            name = 'Forge'
            url = 'https://maven.minecraftforge.net'
        }
        if (use_mixins.toBoolean()) {
            maven {
                name = 'MixinGradle'
                url = 'https://repo.spongepowered.org/repository/maven-public'
            }
        }
    }
    dependencies {
        if (use_mixins.toBoolean()) {
            classpath "org.spongepowered:mixingradle:${mixingradle_version}"
        }
    }
}

plugins {
    id 'net.minecraftforge.gradle' version "${forge_gradle_version}"
    id 'wtf.gofancy.fancygradle' version "${fancy_gradle_version}"
}

if (use_mixins.toBoolean()) {
    apply plugin: 'org.spongepowered.mixin'
}

version = getVersionFromJava(true)
group = maven_group
archivesBaseName = "GTExpert-Core-${minecraft_version}"
java.toolchain.languageVersion.set(JavaLanguageVersion.of(8))

if (use_intellij_idea.toBoolean()) {
    apply {
        plugin 'java'
        plugin 'idea'
    }
    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }
}
if (use_eclipse.toBoolean()) {
    apply {
        plugin 'java'
        plugin 'eclipse'
    }
    eclipse {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }
}

minecraft {
    mappings channel: "${mcp_mappings_channel}", version: "${mcp_mappings_version}"
    if (has_access_transformer.toBoolean()) {
        accessTransformer = file("src/main/resources/META-INF/${archives_base_name}_at.cfg")
    }

    runs {
        client {
            //noinspection GroovyAssignabilityCheck
            workingDirectory file('run')
            if (use_coremod.toBoolean()) {
                jvmArg '-Dfml.coreMods.load=' + coremod_plugin_class_name
            }
            if (use_mixins.toBoolean()) {
                jvmArg '-Dmixin.hotSwap=true'
                jvmArg '-Dmixin.checks.interfaces=true'
                jvmArg '-Dmixin.debug.export=true'
            }
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            environment 'MC_VERSION', '1.12.2'
        }

        server {
            //noinspection GroovyAssignabilityCheck
            workingDirectory file('run')
            if (use_coremod.toBoolean()) {
                jvmArg '-Dfml.coreMods.load=gtexpert.GTEMixinPlugin'
            }
            if (use_mixins.toBoolean()) {
                jvmArg '-Dmixin.hotSwap=true'
                jvmArg '-Dmixin.checks.interfaces=true'
            }
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            environment 'MC_VERSION', '1.12.2'
        }
    }
}

repositories {
    maven {
        name = 'Cleanroom Maven'
        url = 'https://maven.cleanroommc.com'
    }
    maven { // JEI
        name = 'Progwml6 Maven'
        url = 'https://dvs1.progwml6.com/files/maven'
    }
    maven { // CraftTweaker and JEI Backup
        name = 'BlameJared Maven'
        url = 'https://maven.blamejared.com'
    }
    maven {  // Autoconfig and Autosave
        name = 'Mod Maven'
        url = 'https://modmaven.dev'
    }
    maven {
        name = 'Curse Maven'
        url = 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        name = 'Sponge Maven'
        url = 'https://repo.spongepowered.org/maven'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Hard Dependencies
    // the CCL deobf jar uses very old MCP mappings, making it error at runtime in runClient/runServer
    // therefore we manually deobf the regular jar
    implementation fg.deobf("curse.maven:codechicken-lib-1-8-${ccl_pid}:${ccl_fid}")
    //implementation fg.deobf("curse.maven:gregtech-ce-unofficial-${ceu_pid}:${ceu_fid}")
    // fix NPE with NBTMatcher https://github.com/GregTechCEu/GregTech/pull/1710
    implementation (files("libs/gregtech-1.12.2-2.6.1-beta-deobf.jar"))
    implementation fg.deobf("curse.maven:gregicality-multiblocks-${gcm_pid}:${gcm_fid}")
    implementation fg.deobf("curse.maven:gregtech-food-option-${gfo_pid}:${gfo_fid}")
    implementation fg.deobf("curse.maven:ae2-extended-life-${ae2_pid}:${ae2_fid}")
    implementation fg.deobf("curse.maven:enderio-${eio_pid}:${eio_fid}")
    implementation fg.deobf("curse.maven:ender-io-conduits-${eic_pid}:${eic_fid}")
    implementation fg.deobf("curse.maven:endercore-${eco_pid}:${eco_fid}")
    implementation "info.loenwind.autoconfig:AutoConfig:${minecraft_version}-${autoconfig_version}"
    implementation "info.loenwind.autosave:AutoSave:${minecraft_version}-${autosave_version}"
    implementation fg.deobf("curse.maven:baubles-${bal_pid}:${bal_fid}")
    implementation fg.deobf("curse.maven:redstone-flux-${ref_pid}:${ref_fid}")
    implementation fg.deobf("curse.maven:brandons-core-${brc_pid}:${brc_fid}")
    implementation fg.deobf("curse.maven:draconic-evolution-${dre_pid}:${dre_fid}")
    implementation fg.deobf("curse.maven:draconicadditions-${dra_pid}:${dra_fid}")
    implementation fg.deobf("curse.maven:ae-additions-extra-cells-2-fork-${aea_pid}:${aea_fid}")
    implementation fg.deobf("curse.maven:shadowfacts-forgelin-${sff_pid}:${sff_fid}")

    // Soft Dependencies
    implementation "mezz.jei:jei_1.12.2:${jei_version}"
    implementation "CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-${crt_version}"
    implementation fg.deobf("curse.maven:top-${top_pid}:${top_fid}")
    implementation fg.deobf("curse.maven:ctm-${ctm_pid}:${ctm_fid}")

    // Tests
    testImplementation("org.junit.jupiter:junit-jupiter:${junit_version}")
    testImplementation("org.hamcrest:hamcrest:${hamcrest_version}")

    // Compile-Time Dependencies
    compileOnly "org.jetbrains:annotations:${annotations_version}"
    annotationProcessor "org.jetbrains:annotations:${annotations_version}"

    if (use_assetmover.toBoolean()) {
        fg.deobf "com.cleanroommc:assetmover:${assetmover_version}"
    }
    if (use_mixins.toBoolean()) {
        implementation "zone.rong:mixinbooter:${mixinbooter_version}"
        annotationProcessor "org.spongepowered:mixin:${mixin_annotations_version}:processor"
    }

    // Boot error fix
    runtimeOnly (files("libs/EnderCore-1.12.2-0.5.76-core.jar"))
}

fancyGradle {
    patches {
        resources
        coremods
        asm
        codeChickenLib
    }
}

processJarTask jar

if (build_deobfJar.toBoolean()) {
    // Create deobf dev jars
    tasks.register('deobfJar', Jar) {
        archiveClassifier.set 'deobf'
        from sourceSets.main.output
    }
    processJarTask deobfJar
}

if (build_apiJar.toBoolean()) {
    // Create API library jar
    tasks.register('apiJar', Jar) {
        archiveClassifier.set 'api'
        from(sourceSets.main.java) {
            include 'gtexpert/api/**'
        }
        from(sourceSets.main.output) {
            include 'gtexpert/api/**'
        }
    }
}

if (build_sourceJar.toBoolean()) {
    // Create source jar
    tasks.register('sourcesJar', Jar) {
        archiveClassifier.set 'sources'
        from sourceSets.main.allJava
    }
}

// Loading resources, works even on IDE client runs
sourceSets {
    main {
        if (use_mixins.toBoolean()) {
            ext.refMap = "mixins.${archives_base_name}.refmap.json"
        }

        java {
            srcDirs = ['src/main/java', 'src/api/java']
        }

        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }

    // at compile time, put resources in same directories as classes
    main.output.setResourcesDir(main.java.classesDirectory)
}

artifacts {
    if (build_deobfJar.toBoolean()) {
        archives deobfJar
    }
    if (build_apiJar.toBoolean()) {
        archives apiJar
    }
    if (build_sourceJar.toBoolean()) {
        archives sourcesJar
    }
}

// It is important to NOT re-obfuscate jars for the deobfuscated environment.
// Therefore, we do not finalize the 'jar' task with the 'reobfJar' task.
// The Forge FG5 example buildscript states otherwise, however it creates broken builds in deobfuscated environments.

processResources {
    // required to allow file expansion later
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', version
    inputs.property 'mcversion', minecraft_version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand(['version': version, 'mcversion': minecraft_version])
    }

    // copy everything else except mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

test {
    testLogging {
        events TestLogEvent.STARTED, TestLogEvent.PASSED, TestLogEvent.FAILED
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showStackTraces true
        showCauses true
        showStandardStreams true
    }

    useJUnitPlatform()
}

/**
 * Applies required processing to jar tasks
 * @param task the task to process
 */
private void processJarTask(task) {
    task.configure {
        manifest {
            // noinspection GroovyAssignabilityCheck
            def attribute_map = [:]
            if (use_coremod.toBoolean()) {
                attribute_map['FMLCorePlugin'] = coremod_plugin_class_name
                if (include_mod.toBoolean()) {
                    attribute_map['FMLCorePluginContainsFMLMod'] = true
                    attribute_map['ForceLoadAsMod'] = gradle.startParameter.taskNames[0] == 'build'
                }
            }
            if (use_mixins.toBoolean()) {
                attribute_map['TweakClass'] = 'org.spongepowered.asm.launch.MixinTweaker'
            }
            if (has_access_transformer.toBoolean()) {
                attribute_map['FMLAT'] = archives_base_name + '_at.cfg'
            }
            attributes(attribute_map)
        }

        // exclude all files in src/api from being shipped in the jar
        // this prevents crashes in obfuscated environments
        file('src/api/').eachDirRecurse { dir ->
            exclude dir.name
        }
    }
}

/**
 * @return the current project version, parsed from the version file
 */
@SuppressWarnings('GroovyAssignabilityCheck')
private String getVersionFromJava(boolean addExtra) {
    def major = '0'
    def minor = '0'
    def revision = '0'
    def extra = ''

    file('src/main/java/gtexpert/GTEVersion.java').readLines().each { line ->
        if (line.contains('MAJOR')) {
            def matcher = line =~ /MAJOR\s*=\s*(\d+)/
            if (matcher) major = matcher[0][1]
        } else if (line.contains('MINOR')) {
            def matcher = line =~ /MINOR\s*=\s*(\d+)/
            if (matcher) minor = matcher[0][1]
        } else if (line.contains('REVISION')) {
            def matcher = line =~ /REVISION\s*=\s*(\d+)/
            if (matcher) revision = matcher[0][1]
        } else if (line.contains('EXTRA')) {
            def matcher = line =~ /EXTRA\s*=\s*"(\w+)"/
            if (matcher) extra = matcher[0][1]
            return
        }
    }

    if (addExtra && extra) {
        return "${major}.${minor}.${revision}-${extra}"
    } else {
        return "${major}.${minor}.${revision}"
    }
}
